// saral.bsh
//
// Saral is an experimental, simplified, automated distributed, parallel
// fault-tolerant, runtime for executing a simple general purpose language.
//
// Its goal is to have a very basic infrastructure and show that runtime
// distributed parallelization of code (with out any burden on the programmer)
// is possible and feasible to do.
//
// Saral in Sanskrit means simple.
//
// The current implementation of Saral will be based on MeTA Studio 
// (http://code.google.com/p/metastudio/). This will use the Federation
// framework in MeTA Studio so as to reuse a number of peer-to-peer
// distributed framework APIs that have already been implemented.
// 
// @author V.Ganesh
// @version 0.00001
// @date March 5, 2009
//


//
// Initial objective is to have the following parsed and automatically 
// and correctly parallelize:
//
// a[0..99] = [0..99];  // initialize an array indexed from 0 to 99, 
//                      // with numbers 0 to 99
// sum = 0;
//
// for(i in 0..a.length) {  // a loop over length of numbers in array
//    sum += a[i];          // with simple sum
// }
//
// print(sum); // print the final sum
//
// ---------------------------------------------------------------------
//
// First thoughts:
//   - Parsing syntax should be fairly straight forward
//   - The initialization can be parallelized, this would require
//     parts of the array being kept in different parallel regions
//     and then seamlessly combine into one.
//   - Next is to correctly parallelize the for loop. To do so its important
//     to determine that "sum" is a shared variable. Thus a loop split 
//     parallelization can be easily expressed as a MapReduce operation.
//

import java.util.Hashtable;

private String COMMENT_CHAR = "//";
private String EOS = ";";
private String RANGE = "..";
private String ARRAY_BEGIN = "[";
private String ARRAY_END = "]";
private String BLOCK_BEGIN = "{";
private String BLOCK_END = "}";

private String [] KEYWORDS = new String[]{"for", "in"};
private String [] OPERATORS = new String[]{"+", "+=", ".."};

private int VAR_TYPE_ARRAY  = 1;
private int VAR_TYPE_NUMBER = 2;
private int VAR_TYPE_STRING = 3;

private Hashtable variables = new Hashtable();

// read in the code and return the code as a single line, stripped of comments
readInCode(filePath) {
   fil = openFile(filePath, "r");
   lines = org.meta.common.Utility.readLines(fil);
   fil.close();

   codeLine = "";

   for(line : lines) {
      line = line.trim();
      if (line.length() == 0) continue;

      commentIndex = line.indexOf(COMMENT_CHAR);
      if (commentIndex < 0) { codeLine += line; }
      else if (commentIndex > 0) { codeLine += line.substring(0, commentIndex); }
   } // end for

   return codeLine;
}

// parse a line of code:
parseLine(line) {
   // TODO:
}

// parse the code...
parseCode(codeLine) {
   // split the lines based on end-of-statement terminator
   codeLines = codeLine.split(";");
   
   // parse line by line
   for(cl : codeLines) {
      print(cl);
      parseLine(cl);
   } // end for
}

// form an execution plan 
formExecutionPlan() {
   // TODO:
}

// and execute the plan
execute() {
   // TODO:
}

// the main entry point of the interpreter
saral(fileName) {
   parseCode(readInCode(fileName));
}

// start the interpreter
saral("/home/ganesh/projects/saral/ekaha.srl");

