import java.io.*;

import org.meta.common.*;
import org.meta.math.geom.*;
import org.meta.config.impl.*;
import org.meta.molecule.*;
import org.meta.shell.idebeans.*;
import org.meta.shell.idebeans.eventhandlers.*;

import org.meta.math.Vector3D;
import org.meta.math.Matrix3D;
import org.meta.math.MathUtil;

getLoadedMoleculeFrames() {
    // get the current IDE instance ... hoping that this is already inited
    ideInstance = MainMenuEventHandlers.getInstance(null).getIdeInstance();
    
    if (ideInstance == null) return null;
    
    // then get the workspace desktop instance
    wsDesktop = ideInstance.getWorkspaceDesktop();
    
    if (wsDesktop == null) return null;
    
    // then get the frame list of this desktop
    frameList = wsDesktop.getFrameList();
    
    if (frameList == null) return null;
    
    molFrameList = new Vector();
    
    // iterate throught the frames and get the list of mol viewers
    for(frame : frameList) {
        if (frame instanceof MoleculeViewerFrame) {
            molFrameList.add(frame);
        } // end if
    } // end for
    
    return molFrameList;
} 

/**
 * save the supplied molecule to the specified stream in RIB format
 */
saveMoleculeAsRIB(Molecule frag, Molecule molecule, BoundingBox boundingBox, 
                  FileWriter fos, 
                  String shader, double scaleFactor, int width) {
    
    // and then the rest of stuff
    Utility.dumpALine(fos, "\nDisplay \"" 
                           + molecule.toString() + "\" \"framebuffer\" "
                           + "\"rgba\" \n");
    
    // the scene begins here
    fos.write("FrameBegin 1 \n");
    fos.write("WorldBegin \n");
    
    // and dump the atoms and the bonds!
    atoms    = frag.getAtoms();
    atomInfo = AtomInfo.getInstance();
    
    for(atom : atoms) {
        // draw the sphere ... representing the atom                
        fos.write("AttributeBegin\n");
        Utility.dumpALine(fos, "Translate " + atom.getX() * scaleFactor 
                                      + " " + atom.getY() * scaleFactor
                                      + " " + atom.getZ() * scaleFactor
                                      + "\n");        

        Color color = atomInfo.getColor(atom.getSymbol());
        Utility.dumpALine(fos, "Color " + color.getRed()   / 255.0
                                + " "   + color.getGreen() / 255.0
                                + " "   + color.getBlue()  / 255.0
                                + "\n");

        // the surface shader
        fos.write("Surface \"" + shader + "\" \"Kd\" 1.0 \n");

        if (atom.getAtomCenter().isZero()) {
            Utility.dumpALine(fos, 
                          "LightSource \"distantlight\" 1 \"intensity\" 0.6 "
                           + "\"to\" [0.1 0.1 0.1]\n");
        } else {
            Utility.dumpALine(fos, 
                          "LightSource \"distantlight\" 1 \"intensity\" 0.6 "
                           + "\"to\" [" + atom.getX() * scaleFactor 
                                      + " " + atom.getY() * scaleFactor
                                      + " " + atom.getZ() * scaleFactor 
                                      + "]\n");
        } // end if

        // for ball and stick model
        radiusR = atomInfo.getCovalentRadius(atom.getSymbol()) * 0.5;
        Utility.dumpALine(fos, "Sphere " + (radiusR * scaleFactor)
                                + " -"   + (radiusR * scaleFactor)
                                + " "    + (radiusR * scaleFactor)
                                + " 360.0\n");

        // attribute ends here
        fos.write("AttributeEnd\n\n");

        // now build the bonding information
        connectedList = atom.getConnectedList().keys();
        
        for(cl : connectedList) {
            atom2 = molecule.getAtom(cl);
            
            radius = Math.min(radiusR * 0.5, 
                          atomInfo.getCovalentRadius(atom2.getSymbol()) * 0.25);
            radius = Math.max(radius, atomInfo.getCovalentRadius("H") * 0.5);

            bondType = molecule.getBondType(atom.getIndex(), atom2.getIndex());
            
            // bond attribute starts here
            fos.write("AttributeBegin\n");
                                    
            Utility.dumpALine(fos, "Color " + color.getRed()   / 255.0
                                            + " " + color.getGreen() / 255.0
                                            + " " + color.getBlue()  / 255.0
                                            + "0.3 \n");                    
            
            // the surface shader
            fos.write("Surface \"" + shader + "\" \"Kd\" 1.0 \n");                    
        
            // translate the cylinder appropriately
            center = new Point3D();
            distance = getCenterAndDistance(atom, atom2, center);
            
            Utility.dumpALine(fos, "Translate " + center.getX() * scaleFactor
                                          + " " + center.getY() * scaleFactor
                                          + " " + center.getZ() * scaleFactor
                                          + "\n");
            // and then do appropriate rotation
            // compute vector from atom->atom2
            vector = atom2.getAtomCenter().sub(atom.getAtomCenter());
            vector = (new Vector3D(vector)).normalize();
            
            angleWithZ = MathUtil.toDegrees(Math.acos(vector.getK()));
            
            Utility.dumpALine(fos, "Rotate " + (-angleWithZ)
                                             + " " + vector.getJ()
                                             + " " + (-vector.getI())
                                             + " 0.0 \n");
            
            if (bondType.equals(BondType.WEAK_BOND)) {
                Utility.dumpALine(fos, "Cylinder 0.01 " 
                                        + (-distance * scaleFactor) 
                                        + " 0.0 360.0 \n");
            } else {
                Utility.dumpALine(fos, "Cylinder " + (radius * scaleFactor)
                                        + " " + (-distance * scaleFactor) 
                                        + " 0.0 360.0 \n");
            } // end if
            
            // bond attribute ends here
            fos.write("AttributeEnd\n\n");
        } // end if
    } // end for        
}

/**
 * get the center between two atoms, and the distance from the center
 */
getCenterAndDistance(Atom a1, Atom a2, Point3D p) {        
    p.setX((a1.getX() + a2.getX()) / 2.0);
    p.setY((a1.getY() + a2.getY()) / 2.0);
    p.setZ((a1.getZ() + a2.getZ()) / 2.0);
        
    // Distance(midpoint, atomcenter)
    return a1.distanceFrom(p);
}

saveFragmentsAsRIB(fileName) {
    FileWriter fos = new FileWriter(fileName);

    Molecule mol = getLoadedMoleculeScenes().get(0).getMolecule();
    Matrix3D tmat = getLoadedMoleculeFrames().get(0).getMoleculeViewer()
                                                        .getRotationMatrix();

    schemes = mol.getAllFragmentationSchemes();

    for(scheme : schemes) {
        print("saving: " + scheme);

        frags = scheme.getFragmentList().getFragments();
        
        for(frag : frags) {
            print("frag: " + frag);

            // make a new molecule
            nm = Utility.getDefaultImplFor(Molecule.class).newInstance(); 

            for(atom : frag.getFragmentAtoms()) {
                nm.addAtom(tmat.transform(atom));
            } // end for

            printInAngstrom(nm);

            saveMoleculeAsRIB(nm, mol, new BoundingBox(), fos, 
                              "plastic", 1.0, 512);

            // end of scene
            fos.write("WorldEnd \n");
            fos.write("FrameEnd \n");
        } // end for
    } // end for

    fos.close();
}

// saveFragmentsAsRIB("/home/ganesh/tmp/t.rib");
