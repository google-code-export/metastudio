/**
 * freqPlot.bsh - plot IR/Freq from a GAMESS output file
 *
 * @author V.Ganesh
 */

import org.meta.math.*;
import org.meta.math.la.*;
import org.meta.config.impl.*;

import java.awt.*;

import javax.swing.*;

import org.jfree.chart.*;
import org.jfree.chart.axis.*;
import org.jfree.chart.plot.*;
import org.jfree.data.category.*;
import org.jfree.ui.ApplicationFrame;
import org.jfree.ui.RefineryUtilities;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.LineRenderer3D;

CategoryDataset makeDataset(values, seriesList, categoryList) {
    // create the dataset...
    DefaultCategoryDataset dataset = new DefaultCategoryDataset();

    i = 0;
    for(series : seriesList) {
       for(category : categoryList) {
          dataset.addValue(values.get(i), series, category);
          i++;
       } // end for
    } // end for

    return dataset;
}

JFreeChart createChart(CategoryDataset dataset, 
                       String title, 
                       String categoryLabel, String valueLabel) {        
        // create the chart...
        JFreeChart chart = ChartFactory.createBarChart(
            title,                    // chart title
            categoryLabel,            // domain axis label
            valueLabel,               // range axis label
            dataset,                  // data
            PlotOrientation.VERTICAL, // orientation
            false,                     // include legend
            true,                     // tooltips?
            false                     // URLs?
        );

        // some cusomizations...

        // set the background color for the chart...
        chart.setBackgroundPaint(Color.white);

        // get a reference to the plot for further customisation...
        CategoryPlot plot = chart.getCategoryPlot();
        plot.setBackgroundPaint(Color.lightGray);
        plot.setDomainGridlinePaint(Color.white);
        plot.setDomainGridlinesVisible(true);
        plot.setRangeGridlinePaint(Color.white);

        // set the range axis to display integers only...
        final NumberAxis rangeAxis = (NumberAxis) plot.getRangeAxis();
        rangeAxis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());

        // disable bar outlines...
        BarRenderer renderer = (BarRenderer) plot.getRenderer();
        renderer.setDrawBarOutline(false);
        
        // set up gradient paints for series...
        GradientPaint gp0 = new GradientPaint(
            0.0f, 0.0f, Color.blue, 
            0.0f, 0.0f, new Color(0, 0, 64)
        );
        GradientPaint gp1 = new GradientPaint(
            0.0f, 0.0f, Color.green, 
            0.0f, 0.0f, new Color(0, 64, 0)
        );
        GradientPaint gp2 = new GradientPaint(
            0.0f, 0.0f, Color.red, 
            0.0f, 0.0f, new Color(64, 0, 0)
        );
        renderer.setSeriesPaint(0, gp0);
        renderer.setSeriesPaint(1, gp1);
        renderer.setSeriesPaint(2, gp2);

        CategoryAxis domainAxis = plot.getDomainAxis();
        domainAxis.setCategoryLabelPositions(
            CategoryLabelPositions.createUpRotationLabelPositions(Math.PI / 6.0)
        );        
        
        return chart;        
}

bar(dataset, title, category, value) {
  JFreeChart chart = createChart(dataset, title, category, value);
  ChartPanel chartPanel = new ChartPanel(chart, false);
  chartPanel.setPreferredSize(new Dimension(500, 270));

  JFrame jf = new JFrame();

  jf.setContentPane(chartPanel);
  jf.pack();
  jf.setVisible(true);
}

freqPlot(String gmsOut) {
   freq = arraylist();
   ir   = arraylist();

   fil = openFile(gmsOut, "r");
  
   while(true) {
      line = fil.readLine();

      if (line == null) break;

      line = line.trim();

      if (line.indexOf("FREQUENCY:") >= 0) {
          words = line.split("\\s+");

          for(i=1; i<words.length; i++) {
              if (words[i].indexOf("I") >= 0) continue;

              freq.add(Double.parseDouble(words[i].trim()));
          }
      }

      if (line.indexOf("IR INTENSITY:") >= 0) {
          words = line.split("\\s+");

          for(i=2; i<words.length; i++) {
              ir.add(Double.parseDouble(words[i].trim()));
          }
      }
   }
   fil.close();

   if (ir.size() != freq.size()) {
      ir = arraylist();

      for(i=0; i<freq.size(); i++) ir.add(1.0);
   }

   print(freq); print(ir);

   category = arraylist();
   category.add("frequency");
   bar(makeDataset(ir, freq, category),  "IR vs Freq plot", "Frequency (cm-1)", 
                                         "IR");
}

freqPlot("/home/ganesh/jobs/folic-optmta-mp2-hess-1a.out");
