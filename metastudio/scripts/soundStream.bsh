import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import javax.sound.sampled.*;

import java.net.*;

AudioFormat getAudioFormat(){
    float sampleRate = 8000.0F;
    //8000,11025,16000,22050,44100
    int sampleSizeInBits = 8;
    //8,16
    int channels = 1;
    //1,2
    boolean signed = true;
    //true,false
    boolean bigEndian = false;
    //true,false
    return new AudioFormat(
                      sampleRate,
                      sampleSizeInBits,
                      channels,
                      signed,
                      bigEndian);
}

stream() {
    //Get and display a list of
    // available mixers.
    Mixer.Info[] mixerInfo = AudioSystem.getMixerInfo();
    System.out.println("Available mixers:");
    int micIndx = -1;
    for(int cnt = 0; cnt < mixerInfo.length; cnt++) {
    	System.out.println("[" + cnt + "] " + mixerInfo[cnt].getName());
      if (mixerInfo[cnt].getName().indexOf("Microphone") >= 0) { micIndx = cnt; break; }
    }//end for loop

    if (micIndx == -1) {
      System.out.println("No microphone found!"); return;
    } // end if

    //Get everything set up for capture
    audioFormat = getAudioFormat();
    DataLine.Info dataLineInfo = new DataLine.Info(TargetDataLine.class, audioFormat);

    System.out.println("Will use recording device: [" + micIndx + "] " + mixerInfo[micIndx].getName());

    Mixer mixer = AudioSystem.getMixer(mixerInfo[micIndx]);
    targetDataLine = (TargetDataLine) mixer.getLine(dataLineInfo);

    targetDataLine.open(audioFormat);
    targetDataLine.start();

    captureThread = new Thread() {
       byte[] tempBuffer = new byte[1024];
       public void run(){
         print("connecting...");
         s = new Socket("192.168.0.108", 2500);
         os = s.getOutputStream();
         stopCapture = false;
         print("connected. sending stream...");
         try{
            while(!stopCapture){
               int cnt = targetDataLine.read(tempBuffer, 0, tempBuffer.length);
               if(cnt > 0) os.write(tempBuffer, 0, cnt);
            }//end while            
         }catch (Exception e) {
            System.out.println(e);
         }//end catch
       }//end run
    };

    captureThread.start();
}

streamClient() {
   ss = new ServerSocket(2500); print("listening...");
   s = ss.accept();

   ain = new BufferedInputStream(s.getInputStream());

   // ain=AudioSystem.getAudioInputStream(is);
   audioFormat = getAudioFormat();
   DataLine.Info info=new DataLine.Info(SourceDataLine.class,format);
   line = (SourceDataLine) AudioSystem.getLine(info);
   line.open(format);  

   int framesize = format.getFrameSize( );
   byte[] buffer = new byte[4 * 1024 * framesize]; // the buffer
   int numbytes = 0;      
   boolean started = false; print("streaming...");
   while(true) {
      int bytesread=ain.read(buffer,numbytes,buffer.length-numbytes);
      if (bytesread == -1) break;
      numbytes += bytesread;

      if (!started) {
          line.start();
          started = true;
      }

      int bytestowrite = (numbytes/framesize)*framesize;
      line.write(buffer, 0, bytestowrite);

      int remaining = numbytes - bytestowrite;
      if (remaining > 0) System.arraycopy(buffer,bytestowrite,buffer,0,remaining);
      numbytes = remaining;
   }

   line.drain();
}

stream();
